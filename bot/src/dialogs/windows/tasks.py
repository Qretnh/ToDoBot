import datetime

from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import (Back, Button, Calendar, CalendarConfig,
                                        ScrollingGroup, Select, SwitchTo)
from aiogram_dialog.widgets.text import Const, Format

from bot.src.dialogs.functions.functions import (complete_task_handler,
                                                 delete_task_handler,
                                                 on_add_task,
                                                 on_category_chosen,
                                                 on_category_select_for_tasks,
                                                 on_confirm,
                                                 on_create_category,
                                                 on_date_selected,
                                                 on_description_entered,
                                                 on_description_updated,
                                                 on_no_description,
                                                 on_skip_time, on_time_entered,
                                                 save_title, view_task_detail)
from bot.src.dialogs.functions.getters import (getter_categories,
                                               getter_confirm_task,
                                               getter_selected_category_tasks,
                                               getter_task,
                                               getter_tasks_by_category,
                                               getter_tasks_data)
from bot.src.fsm.todoFSM import todoFSM

my_tasks_window = Window(
    Format("üìù <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏</b>:\n\n{tasks_text}\n"),
    Const("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"),
    Button(Const("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), id="add_task", on_click=on_add_task),
    SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="confirm_task_", state=todoFSM.start),
    state=todoFSM.my_tasks,
    getter=getter_tasks_data,
)

add_tasks_window = Window(
    Const(
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>:\n\n"
        '–ù–∞–ø—Ä–∏–º–µ—Ä: "–°—Ö–æ–¥–∏—Ç—å –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª" –∏–ª–∏ "–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ç—á—ë—Ç" üóí'
    ),
    TextInput(id="input_title", type_factory=lambda text: text, on_success=save_title),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    state=todoFSM.add_task,
)

pick_date_window = Window(
    Const(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ):"
    ),
    Calendar(
        id="calendar",
        config=CalendarConfig(min_date=datetime.date.today()),
        on_click=on_date_selected,
    ),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    state=todoFSM.pick_date,
)
pick_category_window = Window(
    Const(
        "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):"
    ),
    Select(
        Format("{item[name]}"),
        items="categories",
        item_id_getter=lambda c: str(c["id"]),
        id="category_select",
        on_click=on_category_chosen,
    ),
    TextInput(
        id="new_category_input",
        type_factory=lambda text: text,
        on_success=on_create_category,
    ),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    state=todoFSM.pick_category,
    getter=getter_categories,
)

input_description_window = Window(
    Const(
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è', –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    ),
    TextInput(
        id="input_description",
        type_factory=lambda text: text,
        on_success=on_description_updated,
    ),
    Button(Const("–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"), id="no_desc", on_click=on_no_description),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    state=todoFSM.input_description,
)
input_time_window = Window(
    Const(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ø—Ä–∏–º–µ—Ä - 09:30)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ 18:00"
    ),
    TextInput(
        id="input_time", type_factory=lambda text: text, on_success=on_time_entered
    ),
    Button(Const("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), id="skip_time", on_click=on_skip_time),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    state=todoFSM.input_time,
)
confirm_task_window = Window(
    Format(
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>:\n\n"
        "üóÇ <b>–ó–∞–¥–∞—á–∞:</b> {title}\n"
        "üìÖ <b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {due_date} {due_time}\n"
        "üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –∂–º–∏—Ç–µ ‚úÖ"
    ),
    Button(Format("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), id="confirm", on_click=on_confirm),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    getter=getter_confirm_task,
    state=todoFSM.confirm_task,
)
tasks_by_category_window = Window(
    Const(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á\n\n"
        "(–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–¥–∞—á–∏)"
    ),
    ScrollingGroup(
        Select(
            Format("{item}"),
            items="grouped_tasks",
            item_id_getter=lambda item: item,
            id="category_choice",
            on_click=on_category_select_for_tasks,
        ),
        id="categories_scroll",
        width=1,
        height=5,
    ),
    SwitchTo(Const("üîô –ù–∞–∑–∞–¥"), id="back_from_manage_categories", state=todoFSM.start),
    getter=getter_tasks_by_category,
    state=todoFSM.tasks_by_category,
)
task_list_by_category_window = Window(
    Format("üìÇ <b>–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}</b>\n\n"),
    ScrollingGroup(
        Select(
            Format("{item[title]}"),
            items="TODO",
            item_id_getter=lambda task: task["id"],
            id="task_in_category",
            on_click=view_task_detail,
        ),
        id="task_scroll",
        width=1,
        height=5,
    ),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    getter=getter_selected_category_tasks,
    state=todoFSM.task_list_by_category,
)
task_detail_window = Window(
    Format(
        "üìå <b>{task[title]}</b>\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{task[category][name]}</b>\n\n"
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{created_at} </b>\n"
        "–î–∞—Ç–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{due_date} {task[due_time]}</b>\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: {task[description]}"
    ),
    Button(Const("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), id="complete", on_click=complete_task_handler),
    Button(Const("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"), id="delete_task", on_click=delete_task_handler),
    SwitchTo(
        Const("‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"),
        id="update_description",
        state=todoFSM.update_task_description,
    ),
    Back(Const("üîô –ù–∞–∑–∞–¥")),
    getter=getter_task,
    state=todoFSM.task_detail,
)
update_task_description_window = Window(
    Const("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"),
    TextInput(
        id="input_description",
        type_factory=lambda text: text,
        on_success=on_description_entered,
    ),
    state=todoFSM.update_task_description,
)
